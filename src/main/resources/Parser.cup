package parser;

import ast.*;
import java.io.*;
import java.util.*;
import java_cup.runtime.Symbol;

parser code {:

	public void syntax_error(Symbol currentToken) {
		report_error("Syntax error at [" + (currentToken.left+1) +"," + (currentToken.right+1) +"]!", null);
	}

	public static Symbol parse(Reader input) throws Exception {
		return (new Parser(new Lexer(input))).parse();
	}

	public static Symbol parse(String input) throws Exception {
		return parse(new StringReader(input));
	}

	public static void main(String[] args) throws Exception {
		if (args.length < 1) {
			System.out.println(parse(new InputStreamReader(System.in, "UTF8")).value);
		} else for (int i = 0; i < args.length; ++i) {
			System.out.println(parse(new InputStreamReader(new FileInputStream(args[i]), "UTF8")).value);
		}
	}

:}

non terminal Stmt stmt;
non terminal Exp exp;
terminal LLAVE_IZQUIERDA;
terminal LLAVE_DERECHA;

start with stmt;

stmt ::=
	|	LLAVE_IZQUIERDA:$1 repeat$stmt:$2 LLAVE_DERECHA:$3 
		{: RESULT = new Sequence($2.toArray(new Stmt[$2.size()])); :}
;

exp ::=
;

repeat$stmt ::=
		{: List<Stmt> $0;
		$0 = new ArrayList<Stmt>();
		RESULT = $0; :}
	|	repeat$stmt:$1 stmt:$2 
		{: List<Stmt> $0;
		$1.add($2); $0 = $1;
		RESULT = $0; :}
;